POSTGRESQL NOTES

To clear terminal  - control key + L  

To get all database  -  SELECT datname FROM pg_database;
To get all database using shell command  -  \L

To create database  -  CREATE DATABASE test; 
To use another database or wants to enter in another database  -  \c test

To drop database first we have disconnect that database server and move out from it then run query  -  DROP DATABASE test;

To drop table  - DROP TABLE emp;

To create table  - CREATE TABLE emp(id INT, name VARCHAR(20), city varchar(30));

To insert data in table  -  INSERT INTO emp VALUES('101', 'mayank', 'indore'); 

To show table  -  SELECT * FROM emp;

To update data in table -  UPDATE emp SET name = 'Mayank' WHERE id = '101';

To delete data in table  - DELETE FROM emp WHERE id = '102';

Primary Key - CREATE TABLE emp (id INT  PRIMARY KEY);

Auto_INCREAMENT - CREATE TABLE emp (id SERIAL);  

NOT NULL  -  CREATE TABLE emp (fname varchar(25)   NOT NULL ); 

Unique Key  -  CREATE TABLE emp (email varchar(50) UNIQUE);

Default - CREATE TABLE emp (salary BIGINT NOT NULL  DEFAULT  '30000'); -->  by default agar kuch value insert yea add nhi krone to default value add ho jayegi.

Date - CREATE TABLE emp (hire_date DATE NOT NULL);

WHERE CLAUSE :-

SELECT * FROM emp WHERE dept = 'Marketing';
SELECT * FROM emp WHERE dept = 'Marketing' OR dept = 'Management';
SELECT * FROM emp WHERE dept = 'Marketing' AND salary >= 20000;

SELECT * FROM emp WHERE dept IN ('IT', 'Marketing'); 
SELECT * FROM emp WHERE dept NOT IN ('IT', 'Marketing');

DISTINCT CLAUSE :-

SELECT DISTINCT dept FROM emp;

Order by  -  SELECT * FROM emp ORDER BY fname;
             Descending - SELECT * FROM emp ORDER BY fname DESC;

Limit - SELECT * FROM emp LIMIT 2; --> limit tk data bhejega data yea show krega.

Like Clause - SELECT * FROM emp WHERE fname LIKE 'M%' --> character se search kana.
 
Aggregate functions :- 
 
SELECT MAX(salary) FROM emp;
SELECT MIN(salary) FROM emp;
SELECT SUM(salary) FROM emp;
SELECT AVG(salary) FROM emp;

SELECT COUNT(salary) FROM emp;

Group By :-

SELECT dept, COUNT(id) FROM emp GROUP BY dept;
SELECT dept, SUM(salary) FROM emp GROUP BY dept;
SELECT dept, MAX(salary) FROM emp GROUP BY dept;

String functions :- 

SELECT CONCAT(fname, lname) FROM emp;
SELECT id, CONCAT(fname, lname), dept FROM emp;
SELECT CONCAT_WS(' ', fname, lname) FROM emp; --> with space separator

SELECT SUBSTR('Hello World', 1,5);

SELECT REPLACE('Hey buddy', 'Hey', 'hello');

SELECT REVERSE(fname) FROM emp;

SELECT LENGTH('helloo');

SELECT LEFT('Hello', 2);

SELECT RIGHT('Hello', 2);

SELECT TRIM(' heavy   ');

SELECT POSITION('ll' in  'hello');

SELECT UPPER(fname) FROM emp;

SELECT LOWER(lname) FROM emp;

ALTER :-

ADD - ALTER TABLE emp ADD COLUMN age varchar(20);

DROP - ALTER TABLE emp DROP COLUMN age;

RENAME COlUMN - ALTER TABLE emp RENAME COLUMN age TO contact;

RENAME TABLE  - 	ALTER TABLE emp RENAME TO employees;

MODIFICATION or Modify  -  ALTER TABLE emp ALTER COLUMN contact SET DATA TYPE SMALLINT;

DEFAULT  -  ALTER TABLE ALTER COLUMN age SET DEFAULT --> to do we just replace DROP by keyword SET

NOT NULL  - ALTER TABLE ALTER COLUMN age SET NOT NULL; --> to do we just replace DROP by keyword SET

CHECK and CONTRAINTS - ALTER TABLE emp DROP CONTRAINTS mob_no_less_then_10_digit;
                       ALTER TABLE emp ADD CONTRAINTS  mob_not_null CHECK (mob >= 10);

CASE :-

SELECT fname, salary CASE WHEN salary >= 25000 THEN 'HIGH' ELSE 'LOW' END AS salary_category FROM emp;

Foreign Key :-

CREATE TABLE orders(ord_id SERIAL PRIMARY KEY, ord_date DATE NOT NULL, cust_id INT NOT NULL, FOREIGN KEY(cust_id) REFERENCES customers(cust_id));

JOINS :-

CROSS JOIN - SELECT * FROM order_items CROSS JOIN products;
INNER JOIN - SELECT * FROM order_items oi INNER JOIN products p ON oi.p_id = p.p_id;
LEFT JOIN  - SELECT * FROM order_items oi LEFt JOIN products p ON oi.p_id = p.p_id;
RIGHT JOIN - SELECT * FROM order_items oi RIGHT JOIN products p ON oi.p_id = p.p_id;

VIEW :-

CREATE VIEW billing AS (SELECT * FROM order_items CROSS JOIN products);
DROP VIEW billing;

Having :- 

SELECT fname, SUM(salary) FROM emp GROUP BY fname HAVING salary SUM(salary) >= 30000;
